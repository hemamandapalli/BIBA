CREATE DATABASE STUDENTS
USE STUDENTS;
CREATE TABLE STUDENTS_DETAILS (
STUDENTSID INT,
STUDENTNAME varchar(50),
ADDRESS varchar(50),
BRANCH varchar(50)
);
SELECT*FROM STUDENTS_DETAILS;
INSERT INTO STUDENTS_DETAILS VALUES(1,'LEELA','hyderabad','ece'),(2,'priya','delhi','eee'),(3,'Lilly','kadapa','cse'),(4,'riya','hyderabad','ece');

CREATE TABLE STUDENTS_MARKS (
STUDENTSID INT,
BRANCH VARCHAR(50),
ROLLNO VARCHAR(50),
MARKS INT,
);
INSERT INTO STUDENTS_MARKS VALUES(1,'ece',1001,500),(2,'eee',1002,400),(3,'cse',1003,350),(4,'ece',1001,500);
select DISTINCT *from STUDENTS_MARKS;
INSERT INTO STUDENTS_MARKS VALUES(5,'CSE',1005,700),(6,'CSE',1005,700);

select *from STUDENTS_DETAILS;
select DISTINCT *from STUDENTS_MARKS;
------INNERJOIN-----
SELECT DISTINCT STUDENTS_DETAILS.STUDENTSID, STUDENTS_DETAILS.STUDENTNAME,STUDENTS_DETAILS.ADDRESS,STUDENTS_DETAILS.BRANCH,STUDENTS_MARKS.ROLLNO,STUDENTS_MARKS.MARKS
FROM STUDENTS_DETAILS
INNER JOIN STUDENTS_MARKS ON STUDENTS_DETAILS.STUDENTSID=STUDENTS_MARKS.STUDENTSID;
------LEFTJOIN--------
SELECT  STUDENTS_DETAILS.STUDENTSID, STUDENTS_DETAILS.STUDENTNAME,STUDENTS_DETAILS.ADDRESS,STUDENTS_DETAILS.BRANCH,STUDENTS_MARKS.ROLLNO,STUDENTS_MARKS.MARKS
FROM STUDENTS_DETAILS
LEFT JOIN STUDENTS_MARKS ON STUDENTS_DETAILS.STUDENTSID=STUDENTS_MARKS.STUDENTSID;

---RIGHT JOIN----
SELECT  STUDENTS_DETAILS.STUDENTSID, STUDENTS_DETAILS.STUDENTNAME,STUDENTS_DETAILS.ADDRESS,STUDENTS_DETAILS.BRANCH,STUDENTS_MARKS.ROLLNO
FROM STUDENTS_DETAILS
RIGHT JOIN STUDENTS_MARKS ON STUDENTS_DETAILS.STUDENTSID=STUDENTS_MARKS.STUDENTSID;
-----FULL JOIN------
SELECT DISTINCT STUDENTS_DETAILS.STUDENTSID, STUDENTS_DETAILS.STUDENTNAME,STUDENTS_DETAILS.ADDRESS,STUDENTS_DETAILS.BRANCH,STUDENTS_MARKS.ROLLNO
FROM STUDENTS_DETAILS
FULL JOIN STUDENTS_MARKS ON STUDENTS_DETAILS.STUDENTSID=STUDENTS_MARKS.STUDENTSID;

------ string functions-------

SELECT ascii ('AB')/*RETURNS THE ASCII VALUE*/
SELECT char (66)  /*RETURNS ASCII CHARACTER*/
SELECT len ('STUDENTS_MARKS') /*RETURNS THE LENGTH*/
SELECT lower ('HEMA') /*RETURNS IN LOWERCASE*/
SELECT REPLACE ('country','y','ies')/*gives ies inthe place of y*/
SELECT reverse ('HEMA')/*RETURNS THE value in reverse*/
SELECT STR(134.56, 4, 5)/*RETURNS THE ASCII VALUE*/
SELECT upper ('HEMA')/*returns the the value in uppercase*/


---datefunctions------
SELECT dateadd (mm, 2, '2010-02-03')
SELECT datediff ( year, convert (datetime, '2006-05-06'), convert ( datetime, '2009-01-01')) /*gives the number of years between the two  dates.*/
SELECT datediff ( mm,convert (datetime, '2000-04-27'), convert ( datetime, '2002-01-25')
/*gives the number of months between the two  dates.*/

SELECT datepart (mm, '2008-01-01')/*gives month part of the  date.*/
SELECT day ( '2010-03-21')/*returns day in the  date.*/
SELECT month ('2007-04-03')/*returns month in the  date.*/
SELECT year ('2011-04-17')/*returns year in the  date.*/


--------mathematical functions-------
SELECT abs (-77) /* returns the absolute value */
SELECT sin(1.5)/*returns the angle in radians */
SELECT ceiling (14.45)/*returns the smaller or greater value than to the particular value)*/
SELECT exp (4.5)/*returns the exponential value*/
SELECT floor (15.55)/* the largest or less than or equal to the value*/
SELECT log (5.4)/*returns the logarithm of particular value*/

----RANK FUNCTIONS------
SELECT  STUDENTSID,BRANCH,ROLLNO,MARKS,ROW_NUMBER() OVER ( ORDER BY BRANCH desc) AS rowwithbranch
FROM STUDENTS_MARKS; /*ROW_NUMBER() assign a unique row number to each row in the STUDENTS_MARKS*/

SELECT STUDENTSID,BRANCH,ROLLNO,MARKS,RANK() OVER (PARTITION BY BRANCH ORDER BY MARKS DESC) AS RankWithinBranch
FROM STUDENTS_MARKS;/*PARTIONBY will restart the numbering for each unique value in branch*/

SELECT STUDENTSID,BRANCH,ROLLNO,MARKS,DENSE_RANK() over( order by MARKS) AS RANKwithbranch
from STUDENTS_MARKS;/*dense_rank() to assign a dense rank to each row based on the STUDENTSID in ascending order.*/

------NTILE()--------
SELECT STUDENTSID,BRANCH,ROLLNO,MARKS,NTILE(1) OVER ( PARTITION BY BRANCH ORDER BY MARKS DESC) AS GroupNumber
FROM STUDENTS_MARKS;

------ SYSTEM FUNCTIONS----
select HOST_ID() as 'HOSTID'
select HOST_NAME() AS 'NAME'
SELECT DB_NAME() AS 'DB'
SELECT SUSER_ID()
SELECT USER_ID()
------grouping data------
SELECT BRANCH,AVG(MARKS) AS AverageMarks
FROM STUDENTS_MARKS GROUP BY BRANCH ;


